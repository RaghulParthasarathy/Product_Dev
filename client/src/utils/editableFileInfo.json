{
  "FileData": {
    "name": "editableComponents.js",
    "path": "src/editableComponents.js",
    "type": "file",
    "content": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { Settings, X } from 'lucide-react';\nimport { PROJECTID, BACKEND_URL } from './config';\nimport axios from 'axios';\n\n// Create context for edit mode\nconst EditModeContext = createContext();\n\n// Style editor component\nconst StyleEditor = ({ styles, onStyleChange, onClose, elementType }) => {\n  console.log(`Rendering StyleEditor for ${elementType}`, styles);\n  return (\n    <div className=\"fixed top-40 right-0 bg-white p-4 shadow-lg rounded-lg border w-72 z-50\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h3 className=\"font-bold\">Edit {elementType}</h3>\n        <button\n          onClick={onClose}\n          aria-label=\"Close\"\n          className=\"text-gray-500 hover:text-gray-700\"\n        >\n          <X size={20} />\n        </button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {[\n          { label: 'Background Color', type: 'color', property: 'backgroundColor', default: '#ffffff' },\n          { label: 'Text Color', type: 'color', property: 'color', default: '#000000' },\n          { label: 'Font Size (px)', type: 'number', property: 'fontSize', default: '16px' },\n          { label: 'Padding (px)', type: 'number', property: 'padding', default: '0px' },\n          { label: 'Margin (px)', type: 'number', property: 'margin', default: '0px' },\n          { label: 'Border Radius (px)', type: 'number', property: 'borderRadius', default: '0px' },\n        ].map(({ label, type, property, default: defaultValue }) => (\n          <div key={property}>\n            <label className=\"block text-sm mb-1\">{label}</label>\n            <input\n              type={type}\n              value={type === 'color' ? styles[property] || defaultValue : parseInt(styles[property] || defaultValue)}\n              onChange={(e) => {\n                console.log(`Style change: ${property} = ${e.target.value}`);\n                onStyleChange(property, type === 'color' ? e.target.value : `${e.target.value}px`);\n              }}\n              className=\"w-full p-2 border rounded\"\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Higher-Order Component for making elements editable\nconst makeEditable = (WrappedComponent) => {\n  return function EditableComponent(props) {\n    const { editMode, registerElement, updateElement } = useContext(EditModeContext);\n    const [showEditor, setShowEditor] = useState(false);\n    const elementId = props.id;\n    const [styles, setStyles] = useState(props.style || {});\n    const [content, setContent] = useState(props.children || '');\n\n    useEffect(() => {\n      if (editMode) {\n        console.log(`Registering element ${elementId}`, { styles, content });\n        registerElement(elementId, { styles, content });\n      }\n    }, [editMode]);\n\n    const handleStyleChange = (property, value) => {\n      console.log(`Updating styles for element ${elementId}: ${property} = ${value}`);\n      const newStyles = { ...styles, [property]: value };\n      setStyles(newStyles);\n      updateElement(elementId, { styles: newStyles, content });\n    };\n\n    const handleContentChange = (e) => {\n      const newContent = e.target.innerText;\n      console.log(`Updating content for element ${elementId}: ${newContent}`);\n      setContent(newContent);\n      updateElement(elementId, { styles, content: newContent });\n    };\n\n    if (!editMode) {\n      return <WrappedComponent {...props} style={styles}>{content || props.children}</WrappedComponent>;\n    }\n\n    return (\n      <div className=\"relative group\">\n        <WrappedComponent\n          {...props}\n          style={styles}\n          contentEditable={typeof props.children === 'string'}\n          onInput={handleContentChange}\n          suppressContentEditableWarning={true}\n        >\n          {content || props.children}\n        </WrappedComponent>\n\n        <button\n          className=\"absolute flex items-center justify-center top-0 right-0 bg-blue-500 text-white p-1 rounded-bl z-50 opacity-0 group-hover:opacity-100\"\n          onClick={(e) => {\n            e.stopPropagation();\n            console.log(`Opening style editor for element ${elementId}`);\n            setShowEditor(true);\n          }}\n          aria-label=\"Edit Styles\"\n        >\n          <Settings size={16} />\n        </button>\n\n        {showEditor && (\n          <StyleEditor\n            styles={styles}\n            onStyleChange={handleStyleChange}\n            onClose={() => {\n              console.log(`Closing style editor for element ${elementId}`);\n              setShowEditor(false);\n            }}\n            elementType={WrappedComponent.displayName || 'Element'}\n          />\n        )}\n      </div>\n    );\n  };\n};\n\n// Export all possible editable components\nexport const Editable = {\n  div: makeEditable('div'),\n  span: makeEditable('span'),\n  p: makeEditable('p'),\n  h1: makeEditable('h1'),\n  h2: makeEditable('h2'),\n  h3: makeEditable('h3'),\n  h4: makeEditable('h4'),\n  h5: makeEditable('h5'),\n  h6: makeEditable('h6'),\n  section: makeEditable('section'),\n  article: makeEditable('article'),\n  aside: makeEditable('aside'),\n  header: makeEditable('header'),\n  footer: makeEditable('footer'),\n  main: makeEditable('main'),\n  nav: makeEditable('nav'),\n  ul: makeEditable('ul'),\n  ol: makeEditable('ol'),\n  li: makeEditable('li'),\n  a: makeEditable('a'),\n  button: makeEditable('button'),\n  input: makeEditable('input'),\n  textarea: makeEditable('textarea'),\n  select: makeEditable('select'),\n  option: makeEditable('option'),\n  label: makeEditable('label'),\n  form: makeEditable('form'),\n  fieldset: makeEditable('fieldset'),\n  legend: makeEditable('legend'),\n  table: makeEditable('table'),\n  thead: makeEditable('thead'),\n  tbody: makeEditable('tbody'),\n  tfoot: makeEditable('tfoot'),\n  tr: makeEditable('tr'),\n  th: makeEditable('th'),\n  td: makeEditable('td'),\n  caption: makeEditable('caption'),\n  img: makeEditable('img'),\n  figure: makeEditable('figure'),\n  figcaption: makeEditable('figcaption'),\n  blockquote: makeEditable('blockquote'),\n  cite: makeEditable('cite'),\n  code: makeEditable('code'),\n  pre: makeEditable('pre'),\n  hr: makeEditable('hr')\n};\n"
  }
}
